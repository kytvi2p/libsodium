libsodium (1.0.3-1) unstable; urgency=medium

  [ Martin Hamrle ]
  * Use bash for NDK make toolchain

  [ Frank Denis ]
  * Decapitalize
  * Emscripten: reserve space for 8 function pointers
  * Export _crypto_pwhash_scryptsalsa208sha256_ll
  * Do not export sysrandom symbols on Emscripten
  * Reserve slots for function pointers
  * Do not require /dev/urandom emulation in Javascript any more.
  * Move conditionals
  * Emscripten: don't use a memory init file any more. It doesn't take that
    long to load the module, and it's going to make users' life way easier.
  * Do not require /dev/urandom emulation in Javascript any more.
  * Emscripten: don't use a memory init file any more. It doesn't take that
    long to load the module, and it's going to make users' life way easier.
  * No browser, no filesystem support required
  * Running the JS tests requires the filesystem.
  * Do not hardcode the node binary
  * Re-add filesystem support for the library
  * randombytes_random() is 32 bits, even in JS.
  * Factorize randombytes_uniform() Don't require randombytes implementations
    to reimplement this. NULL can be passed instead of a function pointer to
    use the default implementation. Allow NULL for randombytes_stir() and
    randombytes_close() as well.
  * Mention what is optional and what is required for a randombytes
    implementation
  * || -> | spotted by Ahmad
  * Invert #if[n]def __EMSCRIPTEN__ logic, put more common case first
  * Add an extra test for randombytes
  * strcmp() with optimization level > 1 is broken on Emscripten (!) Trivial
    workaround that should eventually go to the quirks file until this is
    fixed in Emscripten.
  * quirks\windows\windows-quirks.h -> quirks\quirks.h
  * Move quirks inclusion to cmptest.h, emscsripten quirks to quirks.h
  * Add crypto_generichash_statebytes() sizeof() is not always an option when
    accessing the library from other languages.
  * + crypto_generichash_statebytes()
  * Import moved quirks.h
  * + crypto_hash_sha(256|512)_statebytes
  * Suggest crypto_generichash_statebytes() instead of sizeof()
  * Add statebytes for crypto_hmac_*
  * Export _crypto_generichash_statebytes()
  * Update ChangeLog
  * Thanks @zonyitoo for libsodium-sys (rust native bindings) and OVH
  * (p1 - p2 == 0) => (p1 == p2) No binary changes on supported platforms
    except on gcc/armv7l where the control flow remains identical but
    permutative statements get switched.

  [ Graydon Hoare ]
  * Add configure.lineno to .gitignore

  [ Frank Denis ]
  * Disable PIE on Android
  * Add a test for crypto_stream_salsa20_xor_ic()
  * Add crypto_stream_xsalsa20_ic()
  * Update ChangeLog

  [ mosin ]
  * android ndk requires arch to be arm not armv7

  [ Frank Denis ]
  * Revert "Disable PIE on Android" This reverts commit
    cdf863c7312d7f3cc359312bb7ea4892f1c06d74.
  * Don't build arm and armv7 android targets in the same directory
  * android-mips -> android-mips32
  * Android: Use app platform 18
  * armv7 -> armv7-a
  * Spacing
  * Remove useless comment
  * crypto_sign_detached(): no need to store a copy of the public key on the
    stack
  * Constant-time hex2bin.
  * Update ChangeLog
  * Make bin2hex() code consistent with hex2bin()
  * scrypt: corrected pointer alias issues causing scrypt to fail on MIPS64 by
    jfoug <jfoug at cox.net> via JtR issue #1032
  * scrypt: keep r as a size_t value
  * Compare size_t values with ULL
  * __declspec() / __attribute__(()) shouldn't come before "typedef"
  * Use proper nonce length now that's it's a pointer in box_easy2 test.
  * Indentation
  * Indentation
  * Use getrandom(2) on Linux, if available.
  * Android: Use app platform 21
  * Update ChangeLog
  * Don't divide by zero if sodium_allocarray() is called with count=0
  * Add a test for sodium_allocarray(0, x)
  * Better separation between crypto_auth[_verify] and the NIST-like API.
  * + crypto_box_seal()
  * Update ChangeLog
  * Slightly revamp dist-build/ios.sh - Compile arm32 and arm64 targets
    separately - Compile for the iOS simulator
  * Let dist-build/ios.sh compile only for iOS and the iOS emulator.
  * + simple OSX build script
  * JS target: window.crypto is not defined in webworkers; use self.crypto
    instead.
  * Add missing tests to the Visual Studio solutions
  * salsa20_random_buf(): mix the output size with the key
  * Use memcpy() instead of ugly casts. No changes to compiled code.
  * Turn ASAN errors into warnings in sodium_utils{2,3} tests
  * Add missing Visual Studio filters for recent tests
  * Remove resource.h/resource.rc
  * Version bump

  [ woobs ]
  * Update NuGet configuration for version 1.0.3

  [ Frank Denis ]
  * Remove package.nuspec, package.targets, and package.xml
  * Use sodium_malloc() in the pwhash test.
  * Add solution for vs2015
  * Don't downcast size_t to int
  * Use correct ToolsVersion in the vc2015 proejct
  * VC2012 ToolsVersion is 12.0

  [ Shannen Saez ]
  * Use https when linking where possible.

  [ Frank Denis ]
  * Update ChangeLog
  * Update version for Coverity
  * Rename arguments for consistency
  * Also zero the public key and nonce after encryption in crypto_box_seal()
  * Add tests for custom randombytes_uniform. Check for
    crypto_auth_hmacsha512256_statebytes() presence.
  * crypto_box_keypair() cannot fail - Add lcov exclusion.

  [ Kill Your TV ]
  * New upstream release
  * Update debian/libsodium13.symbols

 -- Kill Your TV <killyourtv@i2pmail.org>  Sat, 09 May 2015 22:26:19 +0000

libsodium (1.0.2-1) unstable; urgency=medium

  [ Andre Caron ]
  * Changes DLL_EXPORT to SODIUM_DLL_EXPORT.

  [ Frank Denis ]
  * DLL_EXPORT -> SODIUM_DLL_EXPORT
  * SIGSEGV handlers are incompatible with -fsanitize=address
  * Credit CodesInChaos
  * Update ChangeLog
  * Explicit int32 -> int64 conversions

  [ Phillip Mienk ]
  * Prevent first-run ./autogen.sh error due to ltmain.sh absence.

  [ Frank Denis ]
  * Check that -D_FORTIFY_SOURCE=2 doesn't trigger a compiler bug

  [ evoskuil ]
  * Fix integer narrowing warnings in tests.
  * Revert changes to common props.
  * Bump VS dll resource version to 1.0.1.0
  * Add/remove tests from VS test projects.
  * Update NuGet packaging for 1.0.0.0 release (last published).

  [ Frank Denis ]
  * + Loic Maury for Dylium
  * curve25519-donna-c64: don't read an extra byte when expanding a 32-byte
    number into polynomial form Reported by Michael Holmwood.
  * C++ compat
  * curve25519-donna-c64: replace U8TO64/U64TO8 with load_limb/store_limb To
    match the current @agl code.
  * curve25519-donna-c64: use limb instead of uint64_t everywhere for consistency
  * Revert "Fix integer narrowing warnings in tests."
  * Update ChangeLog
  * Tests: use explicit casts when shortening types
  * Add explicit size_t conversions.
  * iOS: add -miphoneos-version-min

  [ Jens Mueller ]
  * fix building visual studio projects within a path containing white spaces

  [ Frank Denis ]
  * Fail if JS crypto is not available. Emscripten registers /dev/urandom and
    /dev/random by default, but falls back to Math.random()*256 when
    crypto.getRandomValues() is not available, which is not acceptable. So we
    need to re-register them no matter what.
  * Do not use "=" with "--" options
  * pre.js: unlink /dev/(u)random before re-registering them
  * Skip mlock/mprotect/explicit_bzero when using Emscripten
  * Don't assume that madvise() is available even if related macros are defined.
  * Mount the current dir as /test-data (nodefs) for testing Javascript code
  * Change EXEEXT to .js for Emscripten
  * Correct /test-data mount point
  * Don't export the JS function names in LDFLAGS.
  * Zero the subkey in {stream,xor}_xsalsa20 Spotted by Michael Rogers.
  * Check if mmap(2) works, not just the presence of MAP_ANON In particular,
    mmap(2) doesn't return an aligner pointer on Emscripten.
  * AC_FUNC_MMAP assumes that mmap(2) is not available when cross-compiling
    except on GNU systems. Just check for function presence instead.
  * Include the test pre.js script only for tests.
  * Don't expect signals to work in Javascript
  * Make 'make check' actually run the tests on Emscripten.
  * Ignore *.mem
  * If -fno-strict-overflow is available, don't add -fwrapv
  * Remove unused and shadowed global
  * Add extra assert() in tests allocating memory on the heap.
  * Always generate libsodium.pc
  * Thanks @jlouis for ENaCl
  * Emscripten: update the list of exported functions
  * sodium_utils2 and sodium_utils3 cannot work in Javascript; this is expected.
  * Remove obsolete, undocumented compatibility layer with Sodium 0.5
  * Exporting crypto_box and crypto_secretbox doesn't make sense in Javascript.
  * Ship android-armv7.sh
  * The node binary was renamed nodejs on Ubuntu.
  * Make sodium_free() callable even if protection is PROT_NONE. Reported by
    @stouset, thanks!
  * We can still directly call _mprotect_readwrite() instead of the high-level
    function.

  [ Jack Wink ]
  * update iOS build script to include arm64 and current OSX machine arch

  [ Frank Denis ]
  * Use the same options on OSX and iOS
  * Cleanup -> make distclean
  * Use make distclean for cleanup; tell the user where it's been installed
  * Make the output more readable
  * dist-build/ios: remove existing headers
  * If the OSX code in ios.sh is just for the simulator, using -Oz is fine
  * Display what the fat library contains
  * Since we're compiling for OSX, run the test suite.

  [ clowwindy ]
  * fix typo
  * build both i386 and x86_64 for iOS simulator

  [ Frank Denis ]
  * We always need a page size
  * We always need to allocate aligned memory
  * Compile for armv7s
  * Use guarded memory for the box_easy/box_detached tests.
  * C++ compat
  * + Eric Dong
  * Warn that libtool might fail if the build directory contains whitespaces

  [ Graydon Hoare ]
  * Add libsodium-uninstalled.pc.in

  [ Frank Denis ]
  * Discourage use of --enable-blocking-random
  * Retry if open(2) is interrupted; set the CLOEXEC flag as well. Also retry
    if read(2) returns EAGAIN. This shouldn't happen in blocking mode, but it
    can't hurt either.
  * Make IPHONEOS_VERSION_MIN overridable
  * Use relative paths in sodium.h This make it easier to use sodium when bundled with another project.

  [ Jack Wink ]
  * change '-pie' to '-Wl,-pie' to squash clang errors
  * check to see if '-Wl,-pie' is supported before using it
  * a second stab at detecting valid linker flags
  * remove extra pie check

  [ Frank Denis ]
  * Let crypto_sign_open() accept NULL for the message length pointer Ditto
    for edwards25519sha512batch for consistency Add a _p suffix to lengths
    that are actually pointers for clarity
  * Let sodium_malloc() and friends work on systems without protected memory.
  * Thanks @harleqin (Lisp CFFI bindings)
  * 2015
  * Wipe the shared key in crypto_box() and crypto_secretbox() The _easy and _detached interfaces already did this.
  * Missing #include for sodium_memzero()
  * Indentation
  * + precomputed interface for crypto_box()
  * Export the precomputed interface to emscripten
  * Move prototypes of functions requiring padding together
  * Add new tests for the crypto_box_*() precomputed interface
  * Ignore Vagrantfile
  * Version bump
  * Update ChangeLog
  * Mention that sodium_alloc() can be used with sodium data structures And
    explain how to deal with crypto_generichash_state
  * Error checking
  * Wipe the last salsa20 block in the reduced rounds versions
  * Sync reduced rounds versions of salsa20 with supercop
  * chacha20: counting the remaining bytes in a block doesn't require ULL
  * Use io.js instead of node, if available.
  * Remove quotes, add version for the Coverity-Travis integration
  * Test crypto_sign_open() with NULL as a pointer to the message size
  * msvc version bump
  * Proper overlapping check; memmove() was called when it was superfluous.
  * Move macros up
  * Emscripten: add a file to mark that the build completed, for libsodium.js
  * Skip sodium_utils{2,3} tests when the target is Javascript
  * Abort if the JS tests don't pass
  * Test crypto_box[_open]_easy_afternm() with short and overflowing lengths
  * Revert 17932c782e5900ac8cee42fe43e3455db85351e0 It broke compilation on OpenBSD.

  [ Kill Your TV ]
  * New upstream git release

 -- Kill Your TV <killyourtv@i2pmail.org>  Fri, 16 Jan 2015 00:33:34 +0000

libsodium (1.0.1-1) unstable; urgency=medium


  [ Frank Denis ]
  * Remove S<l check. Plan is to add is_standard()/is_canonical() instead of
    changing the current behavior of the verification function. Suggested by
    CodesInChaos.
  * Make include guards consistent, and avoid reserved identifiers.
  * Constant-time sodium_bin2hex() Original C# code by CodesInChaos.
  * Make sodium_bin2hex() slightly faster
  * Version bump

  [ Kill Your TV ]
  * Update debian/copyright per file headers
  * New upstream release
  * Bump standards version, no source changes needed.

 -- Kill Your TV <killyourtv@i2pmail.org>  Sat, 11 Oct 2014 22:05:30 +0000

libsodium (1.0.0+20141005.1-1) unstable; urgency=medium

  [ Frank Denis ]
  * and -> and/or
  * SODIUM_VERSION_STRING should be the package version even on Visual Studio
  * ed25519_open(): check that S < l Not strictly required, but I don't see
    any downsides either.
  * Support overlapping input and output regions in
    crypto_secretbox_detached() crypto_stream_salsa20() doesn't support
    overlapping input and output regions, except when they are aliases.
  * Add a test for ed25519 malleability and restore traditional behavior.
  * Avoid a conditional jump
  * Test box_easy with overlapping in/out.
  * Add a test for chacha20poly1305 with overlapping pointers
  * Remove dead variable and assignment

  [ Kill Your TV ]
  * New git upstream snapshot

 -- Kill Your TV <killyourtv@i2pmail.org>  Sun, 05 Oct 2014 18:01:56 +0000

libsodium (1.0.0-2) unstable; urgency=medium

  * Add debugging package (fixes GH #1)
  * Make packages multi-arch capable

 -- Kill Your TV <killyourtv@i2pmail.org>  Fri, 26 Sep 2014 11:03:48 +0000

libsodium (1.0.0-1) unstable; urgency=medium

  * New upstream release

 -- Kill Your TV <killyourtv@i2pmail.org>  Wed, 24 Sep 2014 09:56:43 +0000

libsodium (0.7.1-1) unstable; urgency=medium

  * Initial release

 -- Kill Your TV <killyourtv@i2pmail.org>  Tue, 23 Sep 2014 18:31:03 +0000
